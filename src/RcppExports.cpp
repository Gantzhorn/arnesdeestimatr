// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// updatestep_additive_model
Rcpp::NumericVector updatestep_additive_model(double X_0, Rcpp::NumericVector lambda_t, double A, double m, double sigma, double step_length, Rcpp::NumericVector dW);
RcppExport SEXP _arnesdeestimatr_updatestep_additive_model(SEXP X_0SEXP, SEXP lambda_tSEXP, SEXP ASEXP, SEXP mSEXP, SEXP sigmaSEXP, SEXP step_lengthSEXP, SEXP dWSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type X_0(X_0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lambda_t(lambda_tSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type step_length(step_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dW(dWSEXP);
    rcpp_result_gen = Rcpp::wrap(updatestep_additive_model(X_0, lambda_t, A, m, sigma, step_length, dW));
    return rcpp_result_gen;
END_RCPP
}
// updatestep_sqrt_model
Rcpp::NumericVector updatestep_sqrt_model(double X_0, Rcpp::NumericVector lambda_t, double A, double m, double sigma, double step_length, Rcpp::NumericVector dW);
RcppExport SEXP _arnesdeestimatr_updatestep_sqrt_model(SEXP X_0SEXP, SEXP lambda_tSEXP, SEXP ASEXP, SEXP mSEXP, SEXP sigmaSEXP, SEXP step_lengthSEXP, SEXP dWSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type X_0(X_0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type lambda_t(lambda_tSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type step_length(step_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dW(dWSEXP);
    rcpp_result_gen = Rcpp::wrap(updatestep_sqrt_model(X_0, lambda_t, A, m, sigma, step_length, dW));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_arnesdeestimatr_updatestep_additive_model", (DL_FUNC) &_arnesdeestimatr_updatestep_additive_model, 7},
    {"_arnesdeestimatr_updatestep_sqrt_model", (DL_FUNC) &_arnesdeestimatr_updatestep_sqrt_model, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_arnesdeestimatr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulations.R
\name{simulate_pearson_diffusion}
\alias{simulate_pearson_diffusion}
\title{Simulate a Pearson Diffusion Process}
\usage{
simulate_pearson_diffusion(
  step_length,
  par,
  X_0 = NA,
  total_time,
  sample_method = "auto",
  model = "OU"
)
}
\arguments{
\item{step_length}{Numeric. The time increment for each simulation step.}

\item{par}{Numeric vector of model parameters:
\describe{
\item{beta}{Drift rate - Strengh of mean-reversion}
\item{mu}{Long-term mean of the process.}
\item{sigma}{Diffusion coefficient.}
}}

\item{X_0}{Numeric. Initial value of the process. If \code{NA}, the function sets it to \code{mu}. Default is \code{NA}.}

\item{total_time}{Numeric. Total simulation time.}

\item{sample_method}{Character. Method used for generating the Wiener increments. Passed to \code{fast_rnorm()}.
Default is \code{"auto"}. Other valid options are \code{"stats"} and \code{"dqrng"}.}

\item{model}{Character. The type of Pearson diffusion to simulate. Valid options are:
\itemize{
\item \code{"OU"}: Ornstein-Uhlenbeck process (additive Gaussian noise)
\item \code{"sqrt"}: Square-root process (proportional to sqrt(X)) or CIR-MODEL
\item \code{"linear"}: Linear noise (noise proportional to X) or GARCH MODEL
\item \code{"t-dist"}: Multiplicative (noise proportional to sqrt(X^2 + 1)))
\item \code{"F-dist"}: Multiplicative (noise proportional to sqrt(X * (X + 1)))
\item \code{"Jacobi"}: Jacobi-diffusion - Multiplicative noise proportional to sqrt(X * (1 - X))
}}
}
\value{
A \code{data.frame} with the following columns:
\describe{
\item{t}{Time points of the simulation.}
\item{X_t}{Simulated trajectory of the process.}
}
}
\description{
This function simulates the trajectory of an Ergodic Pearson diffusion process.
This class of diffusion constitutes a highly tractable class of diffusions.
Chose between the type of diffusion via the \code{model} argument.
The options are The Ornstein-Uhlenbeck Process, The Square-root Process,
The Mean-Reverting Geometric Brownian Motion, The t-diffusion, The F-diffusion,
and The Jacobi diffusion.
}
\details{
The function discretizes the chosen Pearson diffusion process and applies the corresponding
update rule at each time step using pre-simulated Wiener increments. The user can select
different diffusion types via the \code{model} argument.
The update rule is based on Algorithm 8.5 in \strong{Simo Särkkä} and \strong{Arno Solin}: \emph{Applied Stochastic Differential Equations}.
}
\examples{
# Simulate an Ornstein-Uhlenbeck process
simulate_pearson_diffusion(
  step_length = 0.1,
  par = c(beta = 0.5, mu = -0.5, sigma = 0.1),
  total_time = 10,
  model = "OU"
)

# Simulate a square-root process
simulate_pearson_diffusion(
  step_length = 0.1,
  par = c(beta = 0.5, mu = 2, sigma = 0.1),
  total_time = 10,
  model = "sqrt"
)

}
